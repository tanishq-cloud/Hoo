{
    "home": "Inicio",
    "about": "Acerca de",
    "contact": "Contacto",
    "Table": "Tabla",
    "Charts": "Gráficos",
    "Table P": "Tabla P",
    "footer_text": "Todos los derechos reservados.",
    "dashboard_title": "Panel de datos de usuario",
  "users_by_city": "Usuarios por ciudad",
  "users_by_city_des": "Este gráfico muestra la distribución de usuarios en varias ciudades. Cada barra representa el número de usuarios en una ciudad específica.",
  "users_by_company": "Usuarios por empresa",
  "users_by_company_des": "Este gráfico circular destaca la proporción de usuarios asociados con diferentes empresas. Cada segmento representa una empresa y su número de usuarios.",
  "user_geo_locations": "Ubicaciones geográficas de los usuarios",
  "user_geo_locations_des": "Este gráfico de líneas muestra las ubicaciones geográficas de los usuarios por latitud y longitud. Cada línea representa una dimensión de los datos de ubicación.",
  "users": "Usuarios",
  "posts_table": "Tabla de publicaciones",
  "index_title": "Descripción general de la aplicación y técnicas de optimización",
  "zustand_translation": "Uso de Zustand para la traducción",
  "zustand_description": "Usamos Zustand para administrar las traducciones de manera dinámica en toda la aplicación. Esto permite un cambio de idioma fácil, mejorando la experiencia del usuario para diferentes idiomas.",
  
  "react_query_infinite": "Desplazamiento infinito con TanStack React Query",
  "react_query_infinite_description": "Utilizamos useInfiniteQuery de TanStack React Query para implementar la funcionalidad de desplazamiento infinito en nuestras tablas, asegurando una recuperación de datos fluida mientras el usuario se desplaza.",
  
  "axios_api": "Gestión de llamadas a la API con Axios",
  "axios_api_description": "Axios se utiliza para manejar las solicitudes API de manera estructurada, garantizando una gestión fácil de solicitudes GET y POST con manejo robusto de errores.",
  
  "component_architecture": "Arquitectura basada en componentes",
  "component_architecture_description": "Al dividir la aplicación en componentes más pequeños y reutilizables, garantizamos que solo los componentes necesarios se vuelvan a renderizar cuando cambien el estado, optimizando el rendimiento y reduciendo los renders innecesarios.",
  
  "lazy_loading_router": "Carga perezosa con TanStack Router",
  "lazy_loading_router_description": "Usamos TanStack Router para la carga perezosa de componentes, lo que ayuda a cargar solo las partes necesarias de la aplicación cuando sea necesario, mejorando el tiempo de carga inicial y la experiencia del usuario.",
  
  "click_to_change_view": "Haz clic en la pestaña de arriba para cambiar la vista o cargar un componente específico."
  }
  