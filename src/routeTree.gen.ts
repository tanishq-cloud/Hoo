/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const TableLazyImport = createFileRoute('/table')()
const PtableLazyImport = createFileRoute('/ptable')()
const ChartsLazyImport = createFileRoute('/charts')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TableLazyRoute = TableLazyImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/table.lazy').then((d) => d.Route))

const PtableLazyRoute = PtableLazyImport.update({
  id: '/ptable',
  path: '/ptable',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ptable.lazy').then((d) => d.Route))

const ChartsLazyRoute = ChartsLazyImport.update({
  id: '/charts',
  path: '/charts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/charts.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/charts': {
      id: '/charts'
      path: '/charts'
      fullPath: '/charts'
      preLoaderRoute: typeof ChartsLazyImport
      parentRoute: typeof rootRoute
    }
    '/ptable': {
      id: '/ptable'
      path: '/ptable'
      fullPath: '/ptable'
      preLoaderRoute: typeof PtableLazyImport
      parentRoute: typeof rootRoute
    }
    '/table': {
      id: '/table'
      path: '/table'
      fullPath: '/table'
      preLoaderRoute: typeof TableLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/charts': typeof ChartsLazyRoute
  '/ptable': typeof PtableLazyRoute
  '/table': typeof TableLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/charts': typeof ChartsLazyRoute
  '/ptable': typeof PtableLazyRoute
  '/table': typeof TableLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/charts': typeof ChartsLazyRoute
  '/ptable': typeof PtableLazyRoute
  '/table': typeof TableLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/charts' | '/ptable' | '/table'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/charts' | '/ptable' | '/table'
  id: '__root__' | '/' | '/charts' | '/ptable' | '/table'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ChartsLazyRoute: typeof ChartsLazyRoute
  PtableLazyRoute: typeof PtableLazyRoute
  TableLazyRoute: typeof TableLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ChartsLazyRoute: ChartsLazyRoute,
  PtableLazyRoute: PtableLazyRoute,
  TableLazyRoute: TableLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/charts",
        "/ptable",
        "/table"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/charts": {
      "filePath": "charts.lazy.jsx"
    },
    "/ptable": {
      "filePath": "ptable.lazy.jsx"
    },
    "/table": {
      "filePath": "table.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
